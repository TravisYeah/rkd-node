name: CI
env:
  DEBUG: napi:*
  APP_NAME: rkd-node
  MACOSX_DEPLOYMENT_TARGET: "10.13"
"on":
  push:
    branches:
      - master
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        settings:
          # - host: macos-latest
          #   target: x86_64-apple-darwin
          #   architecture: x64
          #   build: |
          #     yarn build
          #     strip -x *.node
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
            architecture: x64
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine-zig
          #   build: |-
          #     set -e &&
          #     rustup target add x86_64-unknown-linux-gnu &&
          #     yarn build --target x86_64-unknown-linux-gnu --zig --zig-abi-suffix 2.12 &&
          #     llvm-strip -x *.node
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #   build: set -e && yarn build && strip *.node
    name: stable - ${{ matrix.settings.target }} - node@16
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Install OpenSSH
        if: ${{ matrix.settings.host == 'windows-latest' }}
        run: Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0 &&
          Set-Service -Name ssh-agent -StartupType Manual &&
          Start-Service ssh-agent &&
          New-Item $env:UserProfile/.ssh -ItemType "directory" &&
          New-Item $env:UserProfile/.ssh/id_rsa &&
          echo "${{ secrets.SSH_PRIVATE_KEY }}" >> $env:UserProfile/.ssh/id_rsa &&
          New-Variable -Name Key -Value "$env:UserProfile\.ssh\id_rsa" &&
          Icacls $Key /c /t /Inheritance:d &&
          Icacls $Key /c /t /Grant ${env:UserName}:F &&
          TakeOwn /F $Key &&
          Icacls $Key /c /t /Grant:r ${env:UserName}:F &&
          Icacls $Key /c /t /Remove:g Administrator "Authenticated Users" BUILTIN\Administrators BUILTIN Everyone System Users &&
          Icacls $Key &&
          Remove-Variable -Name Key &&
          echo "Host github.com\n\ttHostname github.com\n\tIdentityFile $env:UserProfile/.ssh/id_rsa" >> $env:UserProfile/.ssh/config &&
          ssh-add $env:UserProfile/.ssh/id_rsa &&
          ssh-keyscan -t rsa github.com >> $env:UserProfile/.ssh/known_hosts &&
          echo END
      - name: Install SSH key
        if: ${{ !matrix.settings.docker && matrix.settings.host != 'windows-latest' }}
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 16
          check-latest: true
          cache: yarn
          architecture: ${{ matrix.settings.architecture }}
      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ !matrix.settings.docker }}
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.settings.target }}
      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        if: ${{ !matrix.settings.docker }}
        with:
          command: generate-lockfile
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-cargo-registry
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-cargo-index
      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-build-${{ matrix.settings.target }}-node@16
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "-v ${{ env.HOME }}/.cargo/git:/root/.cargo/git -v ${{ env.HOME }}/.cargo/registry:/root/.cargo/registry -v ${{ github.workspace }}:/build -w /build"
          run: mkdir -p /root/.ssh/ &&
            touch /root/.ssh/id_rsa &&
            echo "${{ secrets.SSH_PRIVATE_KEY }}" >> /root/.ssh/id_rsa &&
            chmod 700 /root/.ssh/id_rsa &&
            echo "Host github.com\n\ttHostname github.com\n\tIdentityFile /root/.ssh/id_rsa\n\tHostkeyAlgorithms +ssh-rsa\n\tPubkeyAcceptedAlgorithms +ssh-rsa" >> /root/.ssh/config &&
            apk update &&
            apk add --no-cache git openssh-client &&
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts &&
            ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  # build-freebsd:
  #   runs-on: macos-10.15
  #   name: Build FreeBSD
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install SSH key
  #       uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         known_hosts: ${{ secrets.KNOWN_HOSTS }}
  #     - name: Build
  #       id: build
  #       uses: vmactions/freebsd-vm@v0.1.6
  #       env:
  #         DEBUG: napi:*
  #         RUSTUP_HOME: /usr/local/rustup
  #         CARGO_HOME: /usr/local/cargo
  #         RUSTUP_IO_THREADS: 1
  #       with:
  #         envs: DEBUG RUSTUP_HOME CARGO_HOME RUSTUP_IO_THREADS
  #         usesh: true
  #         mem: 3000
  #         prepare: |
  #           pkg install -y curl node14 python2
  #           curl -qL https://www.npmjs.com/install.sh | sh
  #           npm install -g yarn
  #           curl https://sh.rustup.rs -sSf --output rustup.sh
  #           sh rustup.sh -y --profile minimal --default-toolchain stable
  #           export PATH="/usr/local/cargo/bin:$PATH"
  #           echo "~~~~ rustc --version ~~~~"
  #           rustc --version
  #           echo "~~~~ node -v ~~~~"
  #           node -v
  #           echo "~~~~ yarn --version ~~~~"
  #           yarn --version
  #         run: |
  #           export PATH="/usr/local/cargo/bin:$PATH"
  #           pwd
  #           ls -lah
  #           whoami
  #           env
  #           freebsd-version
  #           yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
  #           yarn build
  #           strip -x *.node
  #           yarn test
  #           rm -rf node_modules
  #           rm -rf target
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: bindings-freebsd
  #         path: ${{ env.APP_NAME }}.*.node
  #         if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - "16"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-test-${{ matrix.settings.target }}-${{ matrix.node }}-${{ hashFiles('yarn.lock') }}
      - name: Install dependencies
        run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  # test-linux-x64-gnu-binding:
  #   name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - "16"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true
  #         cache: yarn
  #     - name: Cache NPM dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: npm-cache-test-linux-x64-gnu-${{ matrix.node }}-${{ hashFiles('yarn.lock') }}
  #     - name: Install dependencies
  #       run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-x86_64-unknown-linux-gnu
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
  # test-linux-x64-musl-binding:
  #   name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - "16"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true
  #         cache: yarn
  #     - name: Cache NPM dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: npm-cache-test-x86_64-unknown-linux-musl-${{ matrix.node }}-${{ hashFiles('yarn.lock') }}
  #     - name: Install dependencies
  #       run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-x86_64-unknown-linux-musl
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine yarn test
  # publish:
  #   name: Publish
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-freebsd
  #     - test-macOS-windows-binding
  #     - test-linux-x64-gnu-binding
  #     - test-linux-x64-musl-binding
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         check-latest: true
  #         cache: yarn
  #     - name: Cache NPM dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: npm-cache-ubuntu-latest-${{ hashFiles('yarn.lock') }}
  #         restore-keys: |
  #           npm-cache-
  #     - name: Install dependencies
  #       run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: artifacts
  #     - name: Move artifacts
  #       run: yarn artifacts
  #     - name: List packages
  #       run: ls -R ./npm
  #       shell: bash
  #     - name: Publish
  #       run: |
  #         if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
  #         then
  #           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #           npm publish --access restricted
  #         elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
  #         then
  #           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #           npm publish --tag next --access restricted
  #         else
  #           echo "Not a release, skipping publish"
  #         fi
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
